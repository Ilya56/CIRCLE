<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sp = 10
angle = 0
x = room_width / 2
y = room_height / 2
r = 40
rp = r + 10

alarm[0] = room_speed / 2
globalvar wsp;
wsp = 4
if mode &gt; 1
    wsp = 8

game = true
globalvar w;
w = display_get_gui_width()
h = display_get_gui_height()

time = 0

rk = 1

/*color[0] = c_black
color[1] = c_gray
color[2] = c_dkgray
cn = 3*/
/*color[0] = c_red
color[1] = c_orange
color[2] = c_yellow
color[3] = c_lime
color[4] = c_green
color[5] = c_aqua
color[6] = c_blue
color[7] = c_purple
cn = 8*/
/*color[0] = $101010
color[1] = $202020
color[2] = $303030
cn = 3*/

smooth = false

nbest = false

level = 0
levelmax = 8
init_colors()
cn = 3

init_levels()

level_time = 1000

/*dir = "D:\Projects\CIRCLE.gmx\music\"
mn = 20

var mind = 1//irandom(mn - 1) + 1
file = dir + "music" + string(mind) + ".mp3"
buff = buffer_create(1, buffer_grow, 1)
buffer_load_ext(buff, file, 0)

buffer_seek(buff, buffer_seek_start, 44)
for(var i = 0; i &lt; buffer_get_size(buff); i++)
{
    buffer_seek(buff, buffer_seek_relative, -1) 
    rs[i] = buffer_read(buff, buffer_s16) / 2000
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if game
{
    instance_create(0, 0, obj_wall)
    if wsp &lt; 15
        wsp += 0.05
    alarm[0] = room_speed / 3
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if game
{
    if keyboard_check(vk_left)
        angle -= sp
    if keyboard_check(vk_right)
        angle += sp
    
    if angle &lt; 0
        angle += 360
    if angle &gt; 360
        angle -= 360
    time++
    
    if irandom(room_speed * 2) == 0
        rk = -rk
    
    if time mod level_time == 0
        if level &lt; levelmax
            level++
}
else
{
    if keyboard_check_released(vk_space)
        room_restart()
}

if keyboard_check_released(vk_escape)
    room_goto_previous()

if mode &gt; 0
    view_angle[0] += wsp / 4 * rk
if mode == 3
{
    view_wview[0] = wsp * 1366 / 10
    view_hview[0] = wsp * 768 / 10
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var bn = 12
for(var i = 0; i &lt; bn; i++)
{
    var j = 360 / bn * i / 180 * pi
    var j1 = 360 / bn * (i + 1) / 180 * pi
    var t = w * 1.1
    
    draw_primitive_begin(pr_trianglefan)
    draw_vertex_colour(x + t * cos(j), y + t * sin(j), color[level, i mod cn], 1)
    draw_vertex_colour(x + r * cos(j), y + r * sin(j), color[level, i mod cn], 1)
    var col
    if smooth
        col = color[level, (i + 1) mod cn]
    else
        col = color[level, i mod cn]
    draw_vertex_colour(x + r * cos(j1), y + r * sin(j1), col, 1)
    draw_vertex_colour(x + t * cos(j1), y + t * sin(j1), col, 1)
    draw_primitive_end()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if game
{
    draw_set_alpha(0.8)
    draw_set_color(c_white)
    draw_set_font(fnt_time)
    draw_set_halign(fa_left)
    draw_text(15, 15, get_time(time))
    draw_set_halign(fa_right)
    draw_text(w - 15, 15, level_name[level])
}
else
{
    draw_set_color(c_black)
    draw_set_alpha(0.5)
    draw_rectangle(0, 0, w, h, false)
    
    draw_set_halign(fa_center)
    draw_set_alpha(1)
    draw_set_font(fnt_name)
    draw_set_color(c_white)
    draw_text(w / 2, 100, "CIRCLE")
    draw_set_font(fnt_lose)
    draw_text(w / 5, h / 2, "YOUR TIME#" + get_time(time))
    draw_text(w / 5 * 4, h / 2, "YOUR LEVEL#" + level_name[level])
    if nbest
        draw_text(w / 2, h / 2 + 150, "NEW BEST!")
    draw_text(w / 2, h - 60, "PRESS SPACE TO RESTART")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1)
draw_set_color(c_white)

//var resize = rs[time]

for(var i = 0; i &lt; 5; i++)
    draw_circle(room_width / 2, room_height / 2, r - i + resize, true)

draw_circle(x + (rp + resize) * cos(angle / 180 * pi), y + (rp + resize) * sin(angle / 180 * pi), 3, false)

//draw_arc(room_width / 2, room_height / 2, arcr, 180,    0,      3,    1)
/*               xx               yy        r    angle, starta, width, step*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
